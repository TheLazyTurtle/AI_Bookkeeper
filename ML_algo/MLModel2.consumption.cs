// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
namespace ML_algo;

public partial class MLModel2
{
    /// <summary>
    /// model input class for MLModel2.
    /// </summary>
    #region model input class
    public class ModelInput
    {
        [ColumnName(@"Date")]
        public string Date { get; set; }

        [ColumnName(@"Name")]
        public string Name { get; set; }

        [ColumnName(@"Account")]
        public string Account { get; set; }

        [ColumnName(@"CounterParty")]
        public string CounterParty { get; set; }

        [ColumnName(@"DebitCredit")]
        public bool DebitCredit { get; set; }

        [ColumnName(@"Amount")]
        public float Amount { get; set; }

        [ColumnName(@"TransactionType")]
        public string TransactionType { get; set; }

        [ColumnName(@"Notification")]
        public string Notification { get; set; }

        [ColumnName(@"CategoryId")]
        public int CategoryId { get; set; }
    }

    #endregion

    /// <summary>
    /// model output class for MLModel2.
    /// </summary>
    #region model output class
    public class ModelOutput
    {
        [ColumnName(@"Date")]
        public float[] Date { get; set; }

        [ColumnName(@"Name")]
        public float[] Name { get; set; }

        [ColumnName(@"Account")]
        public float[] Account { get; set; }

        [ColumnName(@"CounterParty")]
        public float[] CounterParty { get; set; }

        [ColumnName(@"DebitCredit")]
        public float[] DebitCredit { get; set; }

        [ColumnName(@"Amount")]
        public float Amount { get; set; }

        [ColumnName(@"TransactionType")]
        public float[] TransactionType { get; set; }

        [ColumnName(@"Notification")]
        public float[] Notification { get; set; }

        [ColumnName(@"CategoryId")]
        public uint CategoryId { get; set; }

        [ColumnName(@"Features")]
        public float[] Features { get; set; }

        [ColumnName(@"PredictedLabel")]
        public int PredictedLabel { get; set; }

        [ColumnName(@"Score")]
        public float[] Score { get; set; }

    }

    #endregion

    public static readonly string MLNetModelPath = Path.GetFullPath("Model.zip");

    private static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new(() => CreatePredictEngine(), true);

    /// <summary>
    /// Use this method to predict on <see cref="ModelInput"/>.
    /// </summary>
    /// <param name="input">model input.</param>
    /// <returns><seealso cref=" ModelOutput"/></returns>
    public static ModelOutput Predict(ModelInput input)
    {
        var predEngine = PredictEngine.Value;
        return predEngine.Predict(input);
    }

    private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
    {
        var mlContext = new MLContext();
        ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
        return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
    }
}